modules：
module模块，用来管理同一个项目中的各个模块。
如果一个项目分成好几个模块，那么我们构建的时候就需要每个模块各构建一次，这样会很麻烦。简单的做法是使用聚合，一次构建全部的模块。

parent：继承，类似于Java中的继承，例如每个子模块都用到了spring，我们可以不对每个子模块单独配置spring的依赖，
可以在父pom中配置各个子模块的公共依赖。


在子模块的pom中配置：
 <parent>
    <groupId>com.youzhibing.account</groupId>
    <artifactId>account-aggregator</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath> <!-- 与不配置一样，默认就是寻找上级目录下得pom.xml -->
  </parent>
  
依赖管理：
dependencyManagement只是声明依赖，并不实现引入，因此子项目需要显示的声明需要的依赖，不然不会从父项目中继承。而dependencies即使子项目中不写需要的依赖项，仍然可以从父项目中继承该依赖项。
继承可以消除重复添加，但是假设添加一个新的子模块，该模块只是提供了一些简单的帮助工具，不需要依赖spring、junit等，
那么就可以在父pom中使用dependencyManagement元素，这样既可以让子模块继承到父模块的依赖配置，
又能保证子模块可以灵活的引入其需要的其他依赖。
在父pom中使用dependencyManagement
我们可以看到子pom中添加的依赖没有指定版本号，这样就可以继承父pom中声明的依赖及版本。

<dependencyManagement>
      <dependencies> <!-- 配置共有依赖 -->
      <!-- spring 依赖 -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>4.0.2.RELEASE</version>
    </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>4.0.2.RELEASE</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>4.0.2.RELEASE</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>4.0.2.RELEASE</version>
    </dependency>
    
      <!-- junit 依赖 -->
      <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.7</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  </dependencyManagement>
  
import
import只在dependencyManagement元素下才有效果，
作用是将目标pom中的dependencyManagement配置导入并合并到当前pom的dependencyManagement元素中，

其他地方
properties：通过<properties>元素，用户可以定义一个或多个maven属性，这样就可以在pom的其他地方使用${属性名}的方式引用该属性。
Maven总共有6类属性，内置属性、POM属性、自定义属性、Settings属性、Java属性。
内置属性：
两个常用内置属性 ${basedir} 表示项目跟目录，即包含pom.xml文件的目录；${version} 表示项目版本
pom属性：
用户可以使用该类属性引用POM文件中对应元素的值。如${project.artifactId}就对应了<project> <artifactId>元素的值，常用的POM属性包括：

${project.build.sourceDirectory}:项目的主源码目录，默认为src/main/java/

${project.build.testSourceDirectory}:项目的测试源码目录，默认为src/test/java/

${project.build.directory} ： 项目构建输出目录，默认为target/

${project.outputDirectory} : 项目主代码编译输出目录，默认为target/classes/

${project.testOutputDirectory}：项目测试主代码输出目录，默认为target/testclasses/

${project.groupId}：项目的groupId

${project.artifactId}：项目的artifactId

${project.version}：项目的version,与${version} 等价

${project.build.finalName}：项目打包输出文件的名称，默认为${project.artifactId}-${project.version}
等。